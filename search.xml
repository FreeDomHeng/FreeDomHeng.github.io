<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS作用域</title>
      <link href="2021/01/05/zyy/"/>
      <url>2021/01/05/zyy/</url>
      
        <content type="html"><![CDATA[<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p><a name="0VRAs"></a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>作用域的定义：<br />一段程序代码中所用到的变量并不总是可用的，而限定这个变量的可用性的代码范围就是这个变量的作用域。通俗的讲，程序的作用域决定了一个变量在哪个地方能用，在哪个地方不能用。<br><a name="hE0q4"></a></p><h1 id="具体讲述"><a href="#具体讲述" class="headerlink" title="具体讲述"></a>具体讲述</h1><p>关于作用域，我们就一个具体的函数来讲述。<br /></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token string">"你好"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>对于一个函数来说，作用域无非就是它所能访问变量的范围。就上面这个函数来说。函数hello所能访问或者使用的变量就是变量m、变量name、变量n以及函数的参数a、b。<br /><strong>简化总结为：</strong><br />一个函数所能访问的变量范围就是：函数的参数、函数内的局部变量、父函数作用域的变量以及全局变量。<br /><br><br /><strong>注意：</strong>在函数hello外不能访问或使用该函数内部定义的变量。<br><a name="BV9oX"></a></p><h1 id="全局作用域和局部作用域"><a href="#全局作用域和局部作用域" class="headerlink" title="全局作用域和局部作用域"></a>全局作用域和局部作用域</h1><p><a name="Bjj50"></a></p><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>当浏览器打开页面时，会形成一个供代码执行的运行环境，这个运行环境就是全局作用域。<br><a name="bh7gJ"></a></p><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p>定义在函数中的变量，只能在该函数中访问，该函数外不可访问。<br><a name="PUjF7"></a></p><h1 id="变量阴影"><a href="#变量阴影" class="headerlink" title="变量阴影"></a>变量阴影</h1><p>当某个函数中定义的变量与该函数外变量的名称相同时，函数执行的过程中会暂时用该函数局部作用域中的变量值代替局部作用域外的变量值。例子如下：<br /></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当此函数执行时，打印的num值是20而不是10。<br /></p><p><a name="8Qhga"></a></p><h1 id="变量的生命周期"><a href="#变量的生命周期" class="headerlink" title="变量的生命周期"></a>变量的生命周期</h1><p><a name="vNy4X"></a></p><h3 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h3><p><a name="32znz"></a></p><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>在此理解为全局变量就是在所有函数外定义的变量。其生命周期在它被声明时初始化，在页面关闭后销毁。<br /><strong>注意：</strong><br />在定义变量的时候，如果变量名前面没有加var，则表明该变量是全局变量。无论该变量在什么地方定义。<br><a name="NQnol"></a></p><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>在某个函数内定义的变量，只能在函数内部访问。其生命周期在它被声明时初始化，在该函数执行完毕后销毁。<br><a name="8IU2m"></a></p><h1 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h1><p>在函数嵌套中，这些函数会形成一个作用域链，而在最内部函数执行时搜索变量的时候，会先从最内部的函数本身搜索该变量，如果在该函数中不存在该变量，就会向该函数的上一级作用域中搜索，逐级递增，最后到全局作用域，如果全局作用域中搜索不到，就会报错：该变量未定义。<br><a name="U1yt3"></a></p><h1 id="JavaScript在浏览器中的运行环境"><a href="#JavaScript在浏览器中的运行环境" class="headerlink" title="JavaScript在浏览器中的运行环境"></a>JavaScript在浏览器中的运行环境</h1><p>当浏览器打开一个页面时，会形成一个可供代码执行的运行环境，也会形成两个虚拟的内存。分别是栈内存和堆内存。<br /><strong>栈内存：</strong><br />提供代码运行环境，存储基本的数据类型值。存储的内容如下所示：<br /></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre><p><br /><strong>堆内存</strong><br />存储引用数据类型值。存储过程如下：<br /></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>在堆内存中开辟一个空间存放键值对，而这个空间对应一个地址，把这个十六进制的地址给存放在栈内存中的变量s。就达到了上述变量s在浏览器中的运行过程。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS闭包</title>
      <link href="2021/01/02/JS/"/>
      <url>2021/01/02/JS/</url>
      
        <content type="html"><![CDATA[<h1 id="js闭包"><a href="#js闭包" class="headerlink" title="js闭包"></a>js闭包</h1><p><a name="Is6u0"></a></p><h1 id="开头简述"><a href="#开头简述" class="headerlink" title="开头简述"></a>开头简述</h1><p>学了JavaScript函数的作用域我们可以清楚的知道，在函数内部可以访问与其同属一个作用域链的外部函数的变量，以及可以访问全局变量。那么，我们如何从函数外部来访问函数内部中的变量呢？显然，常规办法无法实现。那么就引入了闭包这个概念。闭包可以实现从函数外部来访问函数内部中的变量。<br><a name="qCzwu"></a></p><h1 id="js闭包详解"><a href="#js闭包详解" class="headerlink" title="js闭包详解"></a>js闭包详解</h1><p>本篇对js闭包的理解要从一个详细的例子开始，如下所示：<br /></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">displayAlert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//闭包</span>    count <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> displayAlert<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行结果是依次提示101和102</span><span class="token comment" spellcheck="true">//防止内存泄露</span>s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><p><a name="lflEP"></a></p><h2 id="闭包的概念"><a href="#闭包的概念" class="headerlink" title="闭包的概念"></a>闭包的概念</h2><p>所谓闭包，就是在函数内部定义一个函数，通俗的来讲也就是函数内部的函数。也就是上面代码块中所指的函数displayAlert。<br><a name="opL22"></a></p><h2 id="闭包的原理"><a href="#闭包的原理" class="headerlink" title="闭包的原理"></a>闭包的原理</h2><p>闭包的作用就是要从函数外部来访问函数内部的变量。常规办法无法实现，那么，闭包就根据作用域的传统作用规律来实现。<br /><strong>具体原理步骤如下：</strong><br />1.在JavaScript语言中，一个函数，其内部的子函数能访问其变量。如上面代码所示，函数displayAlert可以访问函数add中的变量count。<br />2.如上面代码所示，通过执行函数add来把函数displayAlert作为返回值返回出去，然后赋值给变量s，这时变量s就是函数displayAlert。变量s和函数displayAlert属于同一个作用域，就可以访问add函数中的变量count的值。<br />通过以上两个步骤，就能实现在函数外边来访问函数内部的变量。<br><a name="f5mw9"></a></p><h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><p>闭包的作用分为两个：函数外部访问函数内部的变量、让函数内部的变量始终保存在内存中，不随函数的执行完毕而销毁。<br /></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">s1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  num <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> n <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//让变量n自加，同时num属于全局变量</span>  <span class="token keyword">function</span> <span class="token function">s2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> s2<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token function">s1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第一次执行add 变量n = 100</span><span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行num让n加一</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第二次执行add 变量 n = 101</span></code></pre><p>根据上面代码块可以证明，闭包可以让函数内部的变量始终存在于内存中。<br />在第一次执行函数add的时候，变量n初始化为100，函数执行完毕之后，按照常规，变量n就会被销毁。但是，执行函数num之后再执行函数add。发现变量n变为101。这证明变量n并没有被销毁。一直存在于内存中。<br><a name="AZdIk"></a></p><h2 id="使用闭包时应注意"><a href="#使用闭包时应注意" class="headerlink" title="使用闭包时应注意"></a>使用闭包时应注意</h2><p>因为闭包可以让变量一直存在于内存中，所以很容易导致内存泄露，然后严重影响浏览器的性能。所以要在退出函数之前，把用不到的变量从内存中删除。<br /><br><br /><br><br /></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
